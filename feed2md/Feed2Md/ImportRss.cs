
using Feed2Md.Feed;

using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml;
using System.Xml.Serialization;

namespace Feed2Md
{
    public class ImportRss
    {
        private readonly ILogger<ImportRss> _logger;
        private readonly IConfiguration _configuration;
        private XmlNamespaceManager _xmlNamespaceManager;

        //private XmlNamespaceManager AddNamespaces(XmlNameTable nametable)
        //{
        //    var xmlNamespaceManager = new XmlNamespaceManager(nametable);
        //    xmlNamespaceManager.AddNamespace("itunes", "http://www.w3.org/2001/XMLSchema");
        //    xmlNamespaceManager.AddNamespace("psc", "http://www.w3.org/2001/XMLSchema");
        //    return xmlNamespaceManager;
        //}

        public ImportRss(ILogger<ImportRss> logger, IConfiguration configuration)
        {
            _logger = logger;
            _configuration = configuration;
        }

        public Podcast ImportRssFile()
        {
            string rssFileName = _configuration.GetSection("rss").Value;
            return ReadRssFile(rssFileName);
        }

        private void DownloadRssFile(string url)
        {
            throw new NotImplementedException("Use local file until now");
        }

        private Podcast ReadRssFile(string filename)
        {
            var document = new XmlDocument();
            document.Load(filename);
            return DeserializeRssDocument(document);
        }


        // One does not simply deserialize a rss-xml
        private Podcast DeserializeRssDocument(XmlDocument rssDocument)
        {
            var channel = rssDocument.SelectSingleNode("//channel");
            if (channel == null) throw new XmlException("Cannot find channel-node");
            var podcast = new Podcast
            {
                Title = channel.SelectSingleNode("title")?.InnerText,
                Description = channel.SelectSingleNode("description")?.InnerText,
                LastBuildDate = channel.SelectSingleNode("lastBuildDate")?.InnerText,
                Generator = channel.SelectSingleNode("generator")?.InnerText,
                ImageUrl = channel.SelectSingleNode("image/url")?.InnerText,
                Language = channel.SelectSingleNode("language")?.InnerText,
                Link = channel.SelectSingleNode("link")?.InnerText,

                Itunes = new PodcastItunes
                {
                    Category = channel.ITunes("category", "text"),
                    Explicit = channel.ITunes("explicit") == "yes",
                    ImageUrl = channel.ITunes("image", "href"),
                    SubTitle = channel.ITunes("subtitle"),
                    Author = channel.ITunes("author"),
                    Block = channel.ITunes("block") == "yes",
                    RssType = channel.ITunes("type"),

                    Summary = channel.ITunes("summary"),

                    Owner = new AppleItunesPerson
                    {
                        Email = channel.ITunes("itunes:owner/itunes:email"),
                        Name = channel.ITunes("itunes:owner/itunes:name")
                    }
                }
            };
            if (!podcast.Generator.Contains("Podlove")) _logger.LogWarning("Not generated by Podlove. Will fail most likely. But hey: good luck :)");

            foreach (XmlNode episodeNode in channel.SelectNodes("item")) podcast.Episodes.Add(GetEpisode(episodeNode));
            


        

            return podcast;

        }


        private Chapter GetChapter(XmlNode node)
        {
            return new Chapter
            {
                Start = node.Attributes.GetNamedItem("start")?.InnerText,
                Title = node.Attributes.GetNamedItem("title")?.InnerText,
                Url = node.Attributes.GetNamedItem("href")?.InnerText
            };
        }

        private Episode GetEpisode(XmlNode node)
        {
            var audioAttributes = node.SelectSingleNode("enclosure")?.Attributes;
            var audioLength = audioAttributes.GetNamedItem("length")?.InnerText ?? "0";

            var episode = new Episode
            {
                Title = node.SelectSingleNode("title")?.InnerText,
                AudioUrl = audioAttributes.GetNamedItem("url")?.InnerText,
                AudioLength = int.Parse(audioLength),
                Description = node.SelectSingleNode("description")?.InnerText,
                Guid = node.SelectSingleNode("guid")?.InnerText,
                Link = node.SelectSingleNode("link")?.InnerText,
                Published = node.SelectSingleNode("pubDate")?.InnerText,
                Itunes = new EpisodeItunes
                {
                    Author = node.ITunes("author"),
                    Duration = node.ITunes("duration"),
                    Episode = node.ITunes("episode"),
                    EpisodeType = node.ITunes("type"),
                    Season = node.ITunes("season"),
                    Summary = node.ITunes("summary"),
                    SubTitle = node.ITunes("subtitle")
                }

            };

            var chapterNodes = node.PscChildNodes("chapters");
            if (chapterNodes!=null) foreach (XmlNode chapterNode in chapterNodes) episode.Chapters.Add(GetChapter(chapterNode));
            return episode;
        }
    }
}
